// main: ../../../style.sass

// Le fichier de fonctions centralise toutes les fonctions Sass utilsées
  par Nadine


// La fonction color() permet d'utiliser le système de théme de couleurs
  plus facilement. La fonction accepte 2 paramètres : Le nom de la couleur,
  sa déclinaison. Un troisième peut-être ajouter pour renseigner l'opacité.

  Exemple de SASS :
    div
      background: color('principale')
      color: color('back', 100, 0.5)


@function color($var, $decli:50, $opacity:1)
  @if $opacity < 1
    @return #{"rgba(var(--color-"+$var+"-"+$decli+"), "+$opacity+")"}
  @else
    @return #{"rgb(var(--color-"+$var+"-"+$decli+"))"}


// La fonction rgba-to-rgb permet de mélanger 2 couleurs entre elles
  et le résultat en couleur Hexadécimal

  Exemple de SASS :
    div
      background: rgba-to-rgb(transparentize($vert-menthe, 0.8), var(--color-back))

@function rgba-to-rgb($rgba, $background: #fff)
  @return mix(rgb(red($rgba), green($rgba), blue($rgba)), $background, alpha($rgba) * 100%)


// La fonction hex-to-rgb() permet convertir une couleur Hexa en RGB().
  hex-to-rgb est notament utiliser pour convertir les var(color) css
  afin de les utiliser dans le @mixin box-shadow

  Exemple de SASS :
    div
      background: rgb(#{hex-to-rgb($color)})

@function hex-to-rgb($hex)
  @return red($hex) + ", " + green($hex) + ", " + blue($hex)


// La fonction prefix permet d'ajouter automatiquement certaine propriété css
  pour les vieux navigateurs.

  Exemple de SASS :
    div
      @include prefix(transition, color .3s ease)

@mixin prefix($propriete, $args...)
  -webkit-#{$propriete}: $args
  -moz-#{$propriete}: $args
  -ms-#{$propriete}: $args
  -o-#{$propriete}: $args
  #{$propriete}: $args


// La fonction box-shadow() pemet de centraliser la gestion
  des ombres sur Monobloc.

  Exemple de SASS :
    div
      @include box-shadow(4, 'principale', 70)

@mixin box-shadow($level, $var, $decli:50)
  @if $level == 0
    box-shadow: 0 0 0 #{"rgba(var(--color-"+$var+"-"+$decli+"),0)"},0 0 0 #{"rgba(var(--color-"+$var+"-"+$decli+"),0)"}
  @if $level == 1
    box-shadow: 0 0.125em 0.313em #{"rgba(var(--color-"+$var+"-"+$decli+"),.09)"},0 0.063em 0.125em #{"rgba(var(--color-"+$var+"-"+$decli+"),.07)"}
  @else if $level == 2
    box-shadow: 0 0.250em 0.375em #{"rgba(var(--color-"+$var+"-"+$decli+"),.09)"},0 0.063em 0.188em #{"rgba(var(--color-"+$var+"-"+$decli+"),.08)"}
  @else if $level == 3
    box-shadow: 0 0.063em 0.313em 0 #{"rgba(var(--color-"+$var+"-"+$decli+"),.07)"},0 0.438em 1.063em 0 #{"rgba(var(--color-"+$var+"-"+$decli+"),.1)"}
  @else if $level == 4
    box-shadow: 0 0.938em 2.188em #{"rgba(var(--color-"+$var+"-"+$decli+"),.1)"},0 0.313em 0.938em #{"rgba(var(--color-"+$var+"-"+$decli+"),.07)"}
  @else if $level == 5
    box-shadow: 0 0.938em 2.188em #{"rgba(var(--color-"+$var+"-"+$decli+"),.15)"},0 0.313em 0.938em #{"rgba(var(--color-"+$var+"-"+$decli+"),.1)"}
  @else if $level == 100
    box-shadow: 0 2.8px 2.2px #{"rgba(var(--color-"+$var+"-"+$decli+"), 0.034)"},0 6.7px 5.3px #{"rgba(var(--color-"+$var+"-"+$decli+"), 0.048)"},0 12.5px 10px #{"rgba(var(--color-"+$var+"-"+$decli+"), 0.06)"},0 22.3px 17.9px #{"rgba(var(--color-"+$var+"-"+$decli+"), 0.072)"},0 41.8px 33.4px #{"rgba(var(--color-"+$var+"-"+$decli+"), 0.086)"},0 100px 80px #{"rgba(var(--color-"+$var+"-"+$decli+"), 0.12)"}
  @else if $level == 150
    box-shadow: 2px 18px 20px 5px #{"rgba(var(--color-"+$var+"-"+$decli+"), 0.28)"}

  @if $level == -1
    box-shadow: 0 -0.125em 0.313em #{"rgba(var(--color-"+$var+"-"+$decli+"),.09)"},0 -0.063em 0.125em #{"rgba(var(--color-"+$var+"-"+$decli+"),.07)"}
  @else if $level == -2
    box-shadow: 0 -0.250em 0.375em #{"rgba(var(--color-"+$var+"-"+$decli+"),.09)"},0 -0.063em 0.188em #{"rgba(var(--color-"+$var+"-"+$decli+"),.08)"}
  @else if $level == -3
    box-shadow: 0 -0.063em 0.313em 0 #{"rgba(var(--color-"+$var+"-"+$decli+"),.07)"},0 -0.438em 1.063em 0 #{"rgba(var(--color-"+$var+"-"+$decli+"),.1)"}
  @else if $level == -5
    box-shadow: 0 -0.938em 2.188em #{"rgba(var(--color-"+$var+"-"+$decli+"),.15)"},0 -0.313em 0.938em #{"rgba(var(--color-"+$var+"-"+$decli+"),.1)"}
  @else if $level == -100
    box-shadow: 0 -2.8px 2.2px #{"rgba(var(--color-"+$var+"-"+$decli+"), 0.034)"},0 -6.7px 5.3px #{"rgba(var(--color-"+$var+"-"+$decli+"), 0.048)"},0 -12.5px 10px #{"rgba(var(--color-"+$var+"-"+$decli+"), 0.06)"},0 22.3px 17.9px #{"rgba(var(--color-"+$var+"-"+$decli+"), 0.072)"},0 -41.8px 33.4px #{"rgba(var(--color-"+$var+"-"+$decli+"), 0.086)"},0 -100px 80px #{"rgba(var(--color-"+$var+"-"+$decli+"), 0.12)"}



// La fonction for-size permet de changer l'affichage des élèments en fonction
  de la taille de l'écran de l'utilisateur.
  Exemple de SASS :
    div
      display: block
      @include for-size(phone-only)
        display: none


@mixin for-size($size)
  @if $size == smartphone
    @media (max-width: 599px)
      @content
  @else if $size == tablette-portrait
    @media (min-width: 600px)
      @content
  @else if $size == tablette-paysage
    @media (min-width: 900px)
      @content
  @else if $size == desktop
    @media (min-width: 1200px)
      @content
  @else if $size == big-desktop
    @media (min-width: 1800px)
      @content


// La fonction themeColor() génere les variables de couleurs CSS
   de la balise <html>. Ces variables permettent de gérer
   les thèmes colorés utilisé par Nadine.

   0..10..20..30..40..50..60..70..80..90..100
   ↑                  ↑                   ↑
   0=blanc            50=couleur pure     100=noir

@mixin themeColor($colors)
  @each $nom, $hexa in $colors
    @each $declinaison in $declinaisons
      @if $declinaison >= 50
        $weight: ($declinaison - 50)*2
        $color: mix(black, $hexa, $weight)
        --color-#{$nom}-#{$declinaison}: #{hex-to-rgb($color)}
      @else
        $weight: $declinaison*2
        $color: mix($hexa, white, $weight)
        --color-#{$nom}-#{$declinaison}: #{hex-to-rgb($color)}
